import React, {Component} from 'react';
import {ListItem, Right, Text, Badge, Body} from 'native-base';
import {FlatList, RefreshControl} from 'react-native';

import Crawler from '../../../tools/crawler';
import CredentialStorage from '../../../tools/credentialStorage';

var PushNotification = require('react-native-push-notification');

class LessonList extends Component {
    constructor(props) {
        super(props);
        this.state = {refreshing: false};
        this.crawler = new Crawler();
        this.refreshLessons = this.refreshLessons.bind(this);
    }

    refreshLessons() {
        this.setState({refreshing: true});

        let onResponse = (loggedIn, allGrades) => {
            this.setState({refreshing: false});
            if (loggedIn) {
                // todo: compare grades
                this.props.updateGrades(allGrades);
                // PushNotification.cancelAllLocalNotifications();
                // todo: if statement
                PushNotification.localNotification({
                    /* Android Only Properties */
                    id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
                    ticker: "My Notification Ticker", // (optional)
                    autoCancel: true, // (optional) default: true
                    largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
                    smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
                    bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
                    subText: "This is a subText", // (optional) default: none
                    color: "red", // (optional) default: system default
                    vibrate: true, // (optional) default: true
                    vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
                    tag: 'some_tag', // (optional) add tag to message
                    group: "group", // (optional) add group to message
                    ongoing: false, // (optional) set whether this is an "ongoing" notification

                    /* iOS and Android properties */
                    title: "Υπάρχουν Ν νέα μαθήματα", // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
                    message: "My Notification Message", // (required)
                    playSound: true, // (optional) default: true
                    soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
                });
            }
        };
        onResponse = onResponse.bind(this);

        CredentialStorage.load((username, password) =>
            this.crawler.fetchPage(username, password, onResponse)
        );
    }

    render() {
        // if (this.props.grades.length === 0) return <Text>Άδεια λίστα μαθημάτων</Text>;

        return (
            <FlatList
                keyExtractor={(item) => (item.id)}
                refreshControl={
                    <RefreshControl
                        // refreshing={true}
                        refreshing={this.state.refreshing}
                        onRefresh={this.refreshLessons}
                        title="Pull to refresh"
                        colors={['#3F51B5', 'green']}
                        progressBackgroundColor='#fff'
                    />
                }
                data={this.props.grades}
                renderItem={({item}) =>
                    <ListItem>
                        <Body>
                        <Text>{item.title}</Text>
                        </Body>
                        <Right>
                            {
                                item.grade !== null ?
                                    <Badge success={item.grade >= 5} danger={item.grade < 5}>
                                        <Text>{item.grade}</Text>
                                    </Badge> :
                                    null
                            }
                        </Right>
                    </ListItem>
                }
            />
        );
    }
}

export default LessonList;
